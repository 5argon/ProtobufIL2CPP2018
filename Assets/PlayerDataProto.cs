// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player_data_proto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from player_data_proto.proto</summary>
public static partial class PlayerDataProtoReflection {

  #region Descriptor
  /// <summary>File descriptor for player_data_proto.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static PlayerDataProtoReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChdwbGF5ZXJfZGF0YV9wcm90by5wcm90byLNAQoKUGxheWVyRGF0YRIRCglw",
          "bGF5ZXJfaWQYASABKAkSFAoMZGlzcGxheV9uYW1lGAIgASgJEhYKDnBsYXll",
          "cl9pZF9oYXNoGAMgASgFEhcKD3Nob3J0X3BsYXllcl9pZBgEIAEoCRIUCgxm",
          "aXJlYmFzZV91aWQYBSABKAkSDQoFZW1haWwYBiABKAkSEwoLbG9naW5fdG9r",
          "ZW4YByABKAkSFQoNc3RhcnRfcGxheWluZxgIIAEoCRIUCgxsYXN0X3VwZGF0",
          "ZWQYCSABKAliBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerData), global::PlayerData.Parser, new[]{ "PlayerId", "DisplayName", "PlayerIdHash", "ShortPlayerId", "FirebaseUid", "Email", "LoginToken", "StartPlaying", "LastUpdated" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class PlayerData : pb::IMessage<PlayerData> {
  private static readonly pb::MessageParser<PlayerData> _parser = new pb::MessageParser<PlayerData>(() => new PlayerData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerDataProtoReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerData(PlayerData other) : this() {
    playerId_ = other.playerId_;
    displayName_ = other.displayName_;
    playerIdHash_ = other.playerIdHash_;
    shortPlayerId_ = other.shortPlayerId_;
    firebaseUid_ = other.firebaseUid_;
    email_ = other.email_;
    loginToken_ = other.loginToken_;
    startPlaying_ = other.startPlaying_;
    lastUpdated_ = other.lastUpdated_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerData Clone() {
    return new PlayerData(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private string playerId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PlayerId {
    get { return playerId_; }
    set {
      playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "display_name" field.</summary>
  public const int DisplayNameFieldNumber = 2;
  private string displayName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DisplayName {
    get { return displayName_; }
    set {
      displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "player_id_hash" field.</summary>
  public const int PlayerIdHashFieldNumber = 3;
  private int playerIdHash_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerIdHash {
    get { return playerIdHash_; }
    set {
      playerIdHash_ = value;
    }
  }

  /// <summary>Field number for the "short_player_id" field.</summary>
  public const int ShortPlayerIdFieldNumber = 4;
  private string shortPlayerId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ShortPlayerId {
    get { return shortPlayerId_; }
    set {
      shortPlayerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "firebase_uid" field.</summary>
  public const int FirebaseUidFieldNumber = 5;
  private string firebaseUid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string FirebaseUid {
    get { return firebaseUid_; }
    set {
      firebaseUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "email" field.</summary>
  public const int EmailFieldNumber = 6;
  private string email_ = "";
  /// <summary>
  ///For auto-login purpose. Do not use for attach online verification.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Email {
    get { return email_; }
    set {
      email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "login_token" field.</summary>
  public const int LoginTokenFieldNumber = 7;
  private string loginToken_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string LoginToken {
    get { return loginToken_; }
    set {
      loginToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "start_playing" field.</summary>
  public const int StartPlayingFieldNumber = 8;
  private string startPlaying_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string StartPlaying {
    get { return startPlaying_; }
    set {
      startPlaying_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "last_updated" field.</summary>
  public const int LastUpdatedFieldNumber = 9;
  private string lastUpdated_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string LastUpdated {
    get { return lastUpdated_; }
    set {
      lastUpdated_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (DisplayName != other.DisplayName) return false;
    if (PlayerIdHash != other.PlayerIdHash) return false;
    if (ShortPlayerId != other.ShortPlayerId) return false;
    if (FirebaseUid != other.FirebaseUid) return false;
    if (Email != other.Email) return false;
    if (LoginToken != other.LoginToken) return false;
    if (StartPlaying != other.StartPlaying) return false;
    if (LastUpdated != other.LastUpdated) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
    if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
    if (PlayerIdHash != 0) hash ^= PlayerIdHash.GetHashCode();
    if (ShortPlayerId.Length != 0) hash ^= ShortPlayerId.GetHashCode();
    if (FirebaseUid.Length != 0) hash ^= FirebaseUid.GetHashCode();
    if (Email.Length != 0) hash ^= Email.GetHashCode();
    if (LoginToken.Length != 0) hash ^= LoginToken.GetHashCode();
    if (StartPlaying.Length != 0) hash ^= StartPlaying.GetHashCode();
    if (LastUpdated.Length != 0) hash ^= LastUpdated.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(PlayerId);
    }
    if (DisplayName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(DisplayName);
    }
    if (PlayerIdHash != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(PlayerIdHash);
    }
    if (ShortPlayerId.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(ShortPlayerId);
    }
    if (FirebaseUid.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(FirebaseUid);
    }
    if (Email.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Email);
    }
    if (LoginToken.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(LoginToken);
    }
    if (StartPlaying.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(StartPlaying);
    }
    if (LastUpdated.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(LastUpdated);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
    }
    if (DisplayName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
    }
    if (PlayerIdHash != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerIdHash);
    }
    if (ShortPlayerId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ShortPlayerId);
    }
    if (FirebaseUid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FirebaseUid);
    }
    if (Email.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
    }
    if (LoginToken.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginToken);
    }
    if (StartPlaying.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(StartPlaying);
    }
    if (LastUpdated.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(LastUpdated);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerData other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId.Length != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.DisplayName.Length != 0) {
      DisplayName = other.DisplayName;
    }
    if (other.PlayerIdHash != 0) {
      PlayerIdHash = other.PlayerIdHash;
    }
    if (other.ShortPlayerId.Length != 0) {
      ShortPlayerId = other.ShortPlayerId;
    }
    if (other.FirebaseUid.Length != 0) {
      FirebaseUid = other.FirebaseUid;
    }
    if (other.Email.Length != 0) {
      Email = other.Email;
    }
    if (other.LoginToken.Length != 0) {
      LoginToken = other.LoginToken;
    }
    if (other.StartPlaying.Length != 0) {
      StartPlaying = other.StartPlaying;
    }
    if (other.LastUpdated.Length != 0) {
      LastUpdated = other.LastUpdated;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          PlayerId = input.ReadString();
          break;
        }
        case 18: {
          DisplayName = input.ReadString();
          break;
        }
        case 24: {
          PlayerIdHash = input.ReadInt32();
          break;
        }
        case 34: {
          ShortPlayerId = input.ReadString();
          break;
        }
        case 42: {
          FirebaseUid = input.ReadString();
          break;
        }
        case 50: {
          Email = input.ReadString();
          break;
        }
        case 58: {
          LoginToken = input.ReadString();
          break;
        }
        case 66: {
          StartPlaying = input.ReadString();
          break;
        }
        case 74: {
          LastUpdated = input.ReadString();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
